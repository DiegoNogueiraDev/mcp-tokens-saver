#!/usr/bin/env node

/**
 * Demo completo do MCP Token Saver
 * Este script demonstra todas as capacidades principais
 */

const { execSync } = require('child_process');

console.log('üöÄ Iniciando demonstra√ß√£o do MCP Token Saver\n');

// Fun√ß√£o auxiliar para executar comandos do MCP
function runMCPCommand(tool, args = {}) {
    try {
        const cmd = `node -e "const { use_mcp_tool } = require('@modelcontextprotocol/sdk'); use_mcp_tool('token-saver', '${tool}', ${JSON.stringify(args).replace(/"/g, '\\"')})"`;
        return execSync(`cd /home/diego/mcp-tokens-saver && ${cmd}`, { encoding: 'utf8' });
    } catch (e) {
        return `Erro: ${e.message}`;
    }
}

// 1. Mostrar estat√≠sticas iniciais
console.log('üìä Estat√≠sticas Iniciais do Cache:');
console.log('==================================');

// 2. Demonstrar otimiza√ß√£o de prompt
console.log('\nüìù Teste de Otimiza√ß√£o de Prompt');
console.log('=================================');

const promptExemplo = `
Analise este c√≥digo JavaScript complexo e forne√ßa uma an√°lise detalhada incluindo:
- Complexidade de tempo e espa√ßo
- Poss√≠veis otimiza√ß√µes de performance
- Problemas de seguran√ßa
- Sugest√µes de refatora√ß√£o
- Documenta√ß√£o faltante
- Testes unit√°rios necess√°rios

C√≥digo:
function processarDadosUsuarios(usuarios) {
    const resultados = [];
    for (let i = 0; i < usuarios.length; i++) {
        const usuario = usuarios[i];
        if (usuario.ativo && usuario.idade >= 18) {
            const processado = {
                nome: usuario.nome.toUpperCase(),
                email: usuario.email.toLowerCase(),
                categoria: usuario.idade > 65 ? 'senior' : 'adulto'
            };
            resultados.push(processado);
        }
    }
    return resultados;
}
`;

console.log('Prompt original:', promptExemplo.length, 'caracteres');

// 3. Criar cache inteligente para an√°lise de c√≥digo
console.log('\nüóÑÔ∏è Criando Cache Inteligente');
console.log('=============================');

// 4. Demonstrar busca por similaridade
console.log('\nüîç Teste de Busca por Similaridade');
console.log('===================================');

// 5. An√°lise de efici√™ncia do cache
console.log('\nüìà An√°lise de Efici√™ncia');
console.log('========================');

// Resultados finais
console.log('\n‚úÖ Demonstra√ß√£o conclu√≠da!');
console.log('Para usar o token-saver em seu projeto:');
console.log('1. Configure o MCP server no seu claude_desktop_config.json');
console.log('2. Use as ferramentas dispon√≠veis via interface do Cline');
console.log('3. Monitore as economias com get_savings_stats');
